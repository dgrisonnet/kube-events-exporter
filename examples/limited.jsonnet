local k = import 'ksonnet/ksonnet.beta.4/k.libsonet';
local lib = (import 'kube-events-exporter/kube-events-exporter.libsonnet') + {
  config+:: {
    namespace:: 'default',
    version:: std.extVar("VERSION"),
    imageRepo:: std.extVar("IMAGE_REPO"),

    eventTypes:: ['Warning'],
    involvedObjectAPIGroups:: [
      'admissionregistration.k8s.io/v1',
      'apiextensions.k8s.io/v1',
      'apiregistration.k8s.io/v1',
      'apps/v1',
      'authentication.k8s.io/v1',
      'authorization.k8s.io/v1',
      'autoscaling/v1',
      'batch/v1',
      'batch/v1beta1',
      'certificates.k8s.io/v1beta1',
      'coordination.k8s.io/v1',
      'discovery.k8s.io/v1beta1',
      'extensions/v1beta1',
      'monitoring.coreos.com/v1',
      'networking.k8s.io/v1',
      'networking.k8s.io/v1beta1',
      'node.k8s.io/v1beta1',
      'policy/v1beta1',
      'rbac.authorization.k8s.io/v1',
      'scheduling.k8s.io/v1',
      'storage.k8s.io/v1',
      'v1',
    ],
    involvedObjectNamespaces:: [
      'default',
      'kube-node-lease',
      'kube-public',
      'kube-system',
    ],
    reportingControllers:: [
      'attachdetach-controller',
      'aws-cloud-provider',
      'azure-cloud-provider',
      'cidrAllocator',
      'cloud-controller-manager',
      'cloud-node-lifecycle-controller',
      'cloudCIDRAllocator',
      'controllermanager',
      'cronjob-controller',
      'daemonset-controller',
      'deployment-controller',
      'endpoint-controller',
      'endpoint-slice-controller',
      'g-cloudprovider',
      'horizontal-pod-autoscaler',
      'ipallocator-repair-controller',
      'job-controller',
      'kube-controller-manager',
      'kube-proxy',
      'kubelet',
      'node-controller',
      'persistentvolume-controller',
      'portallocator-repair-controller',
      'replicaset-controller',
      'replication-controller',
      'route_controller',
      'scheduler',
      'service-controller',
      'statefulset-controller',
      'taint-controller',
      'ttl-after-finished-controller',
      'volume_expand',
    ],
  },
};

{  
  local kee = lib.kubeEventsExporter,

  'kube-events-exporter-cluster-role-binding': kee.clusterRoleBinding,
  'kube-events-exporter-cluster-role': kee.clusterRole,
  'kube-events-exporter-deployment': kee.deployment,
  'kube-events-exporter-pod-monitor': kee.podMonitor,
  'kube-events-exporter-service-account': kee.serviceAccount,
}
